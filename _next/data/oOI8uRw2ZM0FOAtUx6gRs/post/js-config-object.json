{"pageProps":{"frontmatter":{"title":"Small JS Patterns: Config Object","date":"August 16, 2020","modified":"September 5, 2020","description":"First in JS Patterns Series, fun use of spread operator.","tags":["js"]},"post":{"content":"\nSharing here a quick JS pattern that I enjoy using when dealing with when representing some sort of configuration with an object.\n\n### TLDR\n\nWhen using objects, and assigning key-value pairs, placing array brackets - \\[ \\] – around a variable will evaluate that variable's value instead of using the variable name.\n\n## Using Configuration Objects\n\nThis pattern is vanilla JS, so let's open up our dev tools within your favorite browser. Create an object that represents potential filters on a movie/tv show selection site:\n\n```javascript\nlet filters = {\n  category: [\"Comedy\", \"Horror\", \"Sci-fi\", \"Anime\"],\n  maxDuration: 120,\n};\n```\n\nWe'll assume there is some data list/UI present that handles the possible values available to update this object, such as in this article.\n\nLet's create a function that handles updating our filters value:\n\n```javascript\nconst handleFiltersChange = (key, newValue) => {\n  filters = {\n    ...filters,\n    [key]: newValue,\n  };\n};\n```\n\nNote handleFiltersChange accepts two parameters to facilitate updates – both the key of the value to be updated and the new value. We are using the array bracket wrappers over our key values to evaluate the variable value instead of just updating our filter object with a literal 'key' value.\n\nLet's implement a counter-example without our square brackets to verify the difference:\n\n```javascript\nconst handleFiltersChangeJustKey = (key, newValue) => {\n  filters = {\n    ...filters,\n    key: newValue,\n  };\n};\n```\n\nChecking our original values persist:\n\n```console\n> filters\n{\n  category: ['Comedy', 'Horror', 'Sci-fi', 'Anime'],\n  maxDuration: 120\n}\n```\n\nCalling our second function, handleFiltersChangeJustKey:\n\n```console\n> handleFiltersChangeJustKey('maxDuration', 55)\n> filters\n\n{\n  category: ['Comedy', 'Horror', 'Sci-fi', 'Anime'],\n  maxDuration: 120, //expressed in minutes\n  key: 55\n}\n```\n\nWell, that's not the update we were looking for... Let's try calling our first function, handleFiltersChange:\n\n```console\n> handleFiltersChange ('maxDuration', 90)\n> filters\n\n{\n  category: ['Comedy', 'Horror', 'Sci-fi', 'Anime'],\n  maxDuration: 90,\n  key: 55\n}\n```\n\nCalling handleFiltersChange with a more complex data structure:\n\n```console\n> const newValues = ['Thriller', 'Drama', 'Romance']\n> handleFiltersChange ('category', newValues)\n> filters\n\n{\n  category: ['Thriller', 'Drama', 'Romance'],\n  maxDuration: 90,\n  key: 55\n}\n```\n\n## That's it! Happy coding!\n","excerpt":""},"previousPost":null,"nextPost":{"slug":"intent","frontmatter":{"title":"Intent","date":"August 30, 2020","modified":"September 5, 2020","description":"Let's get inside, out.","tags":["self-accountability"]},"excerpt":"","content":"\n### I'll be writing here about building things with code, or other things that I've found to be interesting or of use.\n\n#### Upcoming writings\n\n- Using Tekton CLI\n- Small JS Patterns\n  - [x] Config Object\n- Postgres Fun\n  - [x] File Imports\n  - [ ] File Exports\n  - [ ] \"Beanstalk\" Tables\n  - [ ] Common Table Expressions\n  - [ ] Generating Tables and Triggers\n  - [ ] Methods to Soft Delete\n- Small Refactorings\n- Transition to Cypress\n- Using Cypress Commands\n"}},"__N_SSG":true}